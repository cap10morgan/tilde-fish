{:preambles {:tilde/all "# This config generated by tilde-fish test suite\\n# DO NOT MODIFY MANUALLY\\n"}
 :fish-greeting "🐟 Welcome to Fish shell! Configured by tilde-fish."
 :snippet/initialization "# Fish shell initialization\\necho 'Loading Fish configuration...'\\nset -g fish_initialized (date)"
 :snippet/git-helpers "# Git helper functions\\nfunction gst\\n    git status --short\\nend\\nfunction glog\\n    git log --oneline --graph --decorate --all\\nend"
 :snippet/cleanup "# Cleanup and utility functions\\nfunction cleanup_temp\\n    rm -rf /tmp/fish_temp_*\\nend\\nfunction show_colors\\n    for color in (set_color --print-colors)\\n        set_color $color\\n        echo $color\\n    end\\n    set_color normal\\nend"
 :abbrs {:gs "git status"
         :gc "git commit"
         :gca "git commit --amend"
         :gp "git push"
         :gpl "git pull"
         :gco "git checkout"
         :gb "git branch"
         :gd "git diff"
         :gl "git log --oneline"
         :gf "git fetch"
         :grb "git rebase"
         :gm "git merge"
         :gst "git stash"
         :gsp "git stash pop"
         :ll "ls -la"
         :la "ls -A"
         :lt "ls -lt"
         :lh "ls -lh"
         :du1 "du -h --max-depth=1"
         :ps "ps aux | grep"}
 :aliases {:ll "ls -la --color=auto"
           :la "ls -A --color=auto"
           :l "ls -CF --color=auto"
           :ls "ls --color=auto"
           :grep "grep --color=auto"
           :egrep "egrep --color=auto"
           :fgrep "fgrep --color=auto"
           :diff "diff --color=auto"
           :tree "tree -C"
           :less "less -R"
           :more "less"
           :cls "clear"
           :h "history"
           :j "jobs"
           :ports "netstat -tulanp"
           :mkdir "mkdir -pv"
           :wget "wget -c"
           :curl "curl -L"
           :df "df -h"
           :free "free -h"
           :top "htop"
           :python "python3"
           :pip "pip3"
           :vim "nvim"
           :vi "nvim"
           :emacs "emacs -nw"
           :code "code ."
           :serve "python3 -m http.server 8000"
           :myip "curl -s http://checkip.amazonaws.com/"
           :localip "hostname -I | awk '{print $1}'"
           :reload "source ~/.config/fish/config.fish"
           :update-fish "fish_update_completions"
           :fish-version "echo $FISH_VERSION"}
 :env {:EDITOR "nvim"
       :VISUAL "nvim"
       :BROWSER "firefox"
       :TERMINAL "alacritty"
       :SHELL "/usr/bin/fish"
       :TERM "xterm-256color"
       :COLORTERM "truecolor"
       :PAGER "less"
       :LESS "-R"
       :MANPAGER "nvim +Man!"
       :BAT_THEME "Dracula"
       :FZF_DEFAULT_OPTS "--height 40% --layout=reverse --border"
       :RIPGREP_CONFIG_PATH "~/.config/ripgrep/config"
       :CARGO_HOME "~/.cargo"
       :RUSTUP_HOME "~/.rustup"
       :GOPATH "~/go"
       :GOBIN "~/go/bin"
       :NODE_ENV "development"
       :NPM_CONFIG_PREFIX "~/.npm-global"
       :PYTHONDONTWRITEBYTECODE "1"
       :PYTHONUNBUFFERED "1"
       :LANG "en_US.UTF-8"
       :LC_ALL "en_US.UTF-8"
       :HISTSIZE "10000"
       :HISTFILESIZE "20000"
       :HISTCONTROL "ignoreboth:erasedups"}
 :paths ["/usr/local/bin"
         "/usr/local/sbin"
         "~/.local/bin"
         "~/.cargo/bin"
         "~/.npm-global/bin"
         "~/go/bin"
         "~/.config/composer/vendor/bin"
         "/opt/homebrew/bin"
         "/opt/homebrew/sbin"
         "~/.gem/ruby/3.0.0/bin"
         "~/.poetry/bin"
         "~/.pyenv/bin"
         "~/.rbenv/bin"
         "~/.nvm/versions/node/current/bin"
         "/snap/bin"
         "~/.local/share/bob/nvim-bin"]
 :functions {:mkcd "mkdir -p $argv[1]; and cd $argv[1]"
             :extract "switch $argv[1]\\ncase '*.tar.gz' '*.tgz'\\n    tar -xzf $argv[1]\\ncase '*.tar.bz2' '*.tbz' '*.tbz2'\\n    tar -xjf $argv[1]\\ncase '*.tar.xz' '*.txz'\\n    tar -xJf $argv[1]\\ncase '*.tar'\\n    tar -xf $argv[1]\\ncase '*.zip'\\n    unzip $argv[1]\\ncase '*.rar'\\n    unrar x $argv[1]\\ncase '*.7z'\\n    7z x $argv[1]\\ncase '*.gz'\\n    gunzip $argv[1]\\ncase '*.bz2'\\n    bunzip2 $argv[1]\\ncase '*.xz'\\n    unxz $argv[1]\\ncase '*'\\n    echo 'Unknown archive format: $argv[1]'\\n    return 1\\nend"
             :backup "cp $argv[1] $argv[1].bak-(date +%Y%m%d-%H%M%S)"
             :restore "if test -f $argv[1].bak\\n    cp $argv[1].bak $argv[1]\\n    echo 'Restored $argv[1] from backup'\\nelse\\n    echo 'No backup found for $argv[1]'\\nend"
             :find-large "find $argv[1] -type f -size +100M -exec ls -lh {} \\; | sort -k5 -hr"
             :find-recent "find $argv[1] -type f -mtime -7 -exec ls -lt {} \\;"
             :weather "curl -s 'wttr.in/$argv[1]?format=3'"
             :qr "qrencode -t ansiutf8 $argv[1]"
             :decode-url "python3 -c \"import urllib.parse; print(urllib.parse.unquote('$argv[1]'))\""
             :encode-url "python3 -c \"import urllib.parse; print(urllib.parse.quote('$argv[1]'))\""
             :json-pretty "python3 -m json.tool $argv[1]"
             :xml-pretty "xmllint --format $argv[1]"
             :serve-dir "python3 -m http.server $argv[1]; or python3 -m http.server 8000"
             :tunnel "ssh -N -L $argv[1]:localhost:$argv[2] $argv[3]"
             :port-check "nc -zv $argv[1] $argv[2]"
             :process-tree "pstree -p $argv[1]"
             :disk-usage "du -h --max-depth=1 $argv[1] | sort -hr"
             :memory-usage "ps aux --sort=-%mem | head -n $argv[1]; or ps aux --sort=-%mem | head -n 10"
             :cpu-usage "ps aux --sort=-%cpu | head -n $argv[1]; or ps aux --sort=-%cpu | head -n 10"
             :net-connections "netstat -tuln | grep :$argv[1]"
             :git-clean-branches "git branch --merged | grep -v '\\*\\|main\\|master\\|develop' | xargs -n 1 git branch -d"
             :git-undo-commit "git reset --soft HEAD~1"
             :git-amend "git commit --amend --no-edit"
             :git-search "git log --all --grep='$argv[1]'"
             :docker-clean "docker system prune -af; and docker volume prune -f"
             :docker-stop-all "docker stop (docker ps -q)"
             :docker-rm-all "docker rm (docker ps -aq)"
             :k8s-pods "kubectl get pods --all-namespaces"
             :k8s-logs "kubectl logs -f $argv[1]"
             :npm-outdated "npm outdated --depth=0"
             :npm-audit "npm audit --audit-level=moderate"
             :cargo-update "cargo install-update -a"
             :rust-analyzer-update "rustup component add rust-analyzer"
             :fish-reload "exec fish"
             :fish-update "fish_update_completions; and echo 'Fish completions updated'"
             :tmux-kill-all "tmux kill-server"
             :screen-resolution "xrandr | grep '*' | awk '{print $1}'"
             :system-info "echo 'OS:' (uname -s); echo 'Kernel:' (uname -r); echo 'Architecture:' (uname -m); echo 'Hostname:' (hostname); echo 'Uptime:' (uptime)"
             :random-password "openssl rand -base64 $argv[1]; or openssl rand -base64 32"
             :timestamp "date +%s"
             :iso-date "date -Iseconds"
             :epoch-to-date "date -d @$argv[1]"
             :convert-spaces-to-tabs "expand -t 4 $argv[1] > $argv[1].tabs"
             :convert-tabs-to-spaces "unexpand -t 4 $argv[1] > $argv[1].spaces"
             :file-count "find $argv[1] -type f | wc -l"
             :dir-count "find $argv[1] -type d | wc -l"
             :largest-files "find $argv[1] -type f -exec ls -la {} \\; | sort -k5 -nr | head -n 10"
             :ssh-keygen-ed25519 "ssh-keygen -t ed25519 -C '$argv[1]'"
             :ssh-copy-key "ssh-copy-id -i ~/.ssh/id_ed25519.pub $argv[1]"
             :chmod-exec "chmod +x $argv[1]"
             :chmod-read "chmod 644 $argv[1]"
             :chmod-private "chmod 600 $argv[1]"
             :chown-me "sudo chown (whoami):(whoami) $argv[1]"}
 :fish ["# Fish shell configuration settings"
        "set -g fish_greeting"
        "set -g fish_prompt_pwd_dir_length 3"
        "set -g fish_color_command blue"
        "set -g fish_color_param cyan"
        "set -g fish_color_redirection yellow"
        "set -g fish_color_comment brblack"
        "set -g fish_color_error red"
        "set -g fish_color_escape green"
        "set -g fish_color_operator magenta"
        "set -g fish_color_quote green"
        "set -g fish_color_valid_path --underline"
        "set -g fish_color_autosuggestion brblack"
        "set -g fish_color_cancel -r"
        "set -g fish_color_search_match --background=brblack"
        "set -g fish_color_selection --background=brblack"
        "set -g fish_pager_color_prefix cyan"
        "set -g fish_pager_color_completion normal"
        "set -g fish_pager_color_description yellow"
        "set -g fish_pager_color_progress cyan"
        "# History configuration"
        "set -g fish_history_size 10000"
        "set -g fish_history_save_on_exit 1"
        "# Key bindings"
        "bind \\cf forward-word"
        "bind \\cb backward-word"
        "bind \\cH backward-kill-word"
        "bind \\e\\[3\\;5~ kill-word"
        "# Auto-completion settings"
        "set -g fish_complete_style complete-first"
        "set -g fish_autosuggestion_enabled 1"
        "# Abbreviation expansion on enter"
        "bind \\r 'expand-abbr; commandline -f execute'"
        "# Vi mode settings"
        "fish_vi_key_bindings"
        "set -g fish_cursor_default block"
        "set -g fish_cursor_insert line"
        "set -g fish_cursor_replace_one underscore"
        "set -g fish_cursor_visual block"
        "# Custom key bindings for vi mode"
        "bind -M insert \\cf forward-word"
        "bind -M insert \\cb backward-word"
        "# Directory jumping with Alt+Up/Down"
        "bind \\e\\[1\\;3A 'cd ..; commandline -f repaint'"
        "bind \\e\\[1\\;3B 'cd -; commandline -f repaint'"
        "# Clear screen with Ctrl+L"
        "bind \\cl 'clear; commandline -f repaint'"
        "# Enable direnv if available"
        "type -q direnv; and direnv hook fish | source"
        "# Enable zoxide if available"
        "type -q zoxide; and zoxide init fish | source"
        "# Enable starship prompt if available"
        "type -q starship; and starship init fish | source"
        "# Enable fzf key bindings if available"
        "type -q fzf; and fzf --fish | source"
        "# Enable conda if available"
        "test -f ~/miniconda3/etc/fish/conf.d/conda.fish; and source ~/miniconda3/etc/fish/conf.d/conda.fish"
        "# Load local fish configuration if it exists"
        "test -f ~/.config/fish/local.fish; and source ~/.config/fish/local.fish"
        "# Performance optimization"
        "set -g fish_complete_on_empty true"
        "set -g fish_complete_on_demand true"
        "# Disable greeting message (already set above, but for emphasis)"
        "set -g fish_greeting ''"
        "# Set up PATH deduplication"
        "set -gx PATH (printf '%s\\n' $PATH | awk '!seen[$0]++' | string join ':')"
        "# Enable better error handling"
        "set -g fish_handle_reparse 1"
        "# Custom prompt setup (if not using starship)"
        "if not type -q starship"
        "    function fish_prompt"
        "        set -l last_status $status"
        "        echo"
        "        set_color cyan"
        "        echo -n (whoami)"
        "        set_color normal"
        "        echo -n '@'"
        "        set_color green"
        "        echo -n (prompt_hostname)"
        "        set_color normal"
        "        echo -n ':'"
        "        set_color blue"
        "        echo -n (prompt_pwd)"
        "        set_color normal"
        "        if test $last_status -ne 0"
        "            set_color red"
        "            echo -n ' [$last_status]'"
        "            set_color normal"
        "        end"
        "        echo -n ' $ '"
        "    end"
        "end"]
 :prompt {:style "starship"
          :show-git true
          :show-time true
          :show-battery false
          :git-branch-length 20
          :path-length 3}}