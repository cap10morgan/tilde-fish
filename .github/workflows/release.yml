name: Release

on:
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: tilde-fish-linux-amd64
            archive_ext: tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            asset_name: tilde-fish-linux-arm64
            archive_ext: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: tilde-fish-windows-amd64
            archive_ext: zip
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            asset_name: tilde-fish-windows-arm64
            archive_ext: zip
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: tilde-fish-macos-amd64
            archive_ext: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: tilde-fish-macos-arm64
            archive_ext: tar.gz

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure cross-compilation (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          mkdir -p ~/.cargo
          echo "[target.aarch64-unknown-linux-gnu]" >> ~/.cargo/config.toml
          echo "linker = \"aarch64-linux-gnu-gcc\"" >> ~/.cargo/config.toml

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-target-

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create archive (Unix)
        if: matrix.archive_ext == 'tar.gz'
        run: |
          mkdir -p release
          binary_name="tilde-fish"
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            binary_name="tilde-fish.exe"
          fi
          cp tilde.edn "target/${{ matrix.target }}/release/"
          cd "target/${{ matrix.target }}/release"
          tar czf "$GITHUB_WORKSPACE/release/${{ matrix.asset_name }}.tar.gz" "$binary_name" tilde.edn

      - name: Create archive (Windows)
        if: matrix.archive_ext == 'zip'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path release
          cp tilde.edn "target/${{ matrix.target }}/release/"
          $binaryName = if ("${{ matrix.target }}".Contains("windows")) { "tilde-fish.exe" } else { "tilde-fish" }
          cd "target/${{ matrix.target }}/release"
          Compress-Archive -Path "$binaryName", tilde.edn -DestinationPath "$GITHUB_WORKSPACE/release/${{ matrix.asset_name }}.zip"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: release/${{ matrix.asset_name }}.${{ matrix.archive_ext }}

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
