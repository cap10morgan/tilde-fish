use clojure_reader::edn::Edn;
use std::collections::BTreeMap;

fn main() {
    let args: Vec<String> = std::env::args().collect();

    if args.len() > 1 && args[1] == "--config" {
        let config = create_fish_config();
        println!("{}", config);
        return;
    }

    if args.len() < 3 {
        eprintln!(
            "Usage: {} [pattern] [path] or {} --config",
            args[0], args[0]
        );
        std::process::exit(1);
    }
}

fn create_fish_config() -> String {
    let mut files_map = BTreeMap::new();
    files_map.insert(Edn::Key("config"), Edn::Str("fish/config.fish"));

    let mut generators_map = BTreeMap::new();
    generators_map.insert(Edn::Key("config"), Edn::Str("--gen-config"));

    let mut preambles_map = BTreeMap::new();
    preambles_map.insert(
        Edn::Key("all"),
        Edn::Str("# This config generated by tilde; DO NOT MODIFY\n"),
    );

    let mut config_map = BTreeMap::new();
    config_map.insert(Edn::Key("name"), Edn::Key("fish"));
    config_map.insert(Edn::Key("files"), Edn::Map(files_map));
    config_map.insert(Edn::Key("generators"), Edn::Map(generators_map));
    config_map.insert(Edn::Key("preambles"), Edn::Map(preambles_map));

    // The Edn type implements Display, so we can just use fmt
    format!("{}", Edn::Map(config_map))
}
